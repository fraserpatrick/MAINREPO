1a
{ assuming ‘∀x. ∀y. path(x, y) → path(y, x)’ with name ‘symmetry’ }
introduce h1;
{ assuming ‘¬path(a(), b())’ with name ‘h1’ }
not-intro h2;
{ assuming ‘path(b(), a())’ with name ‘h2’ }
use h1,
refuted by:
use symmetry,
instantiate with “b()”,
instantiate with “a()”,
apply with:
use h2,
done.
done.





1b
{ assuming ‘∀x. ∀y. path(x, y) → path(y, x)’ with name ‘symmetry’ }
introduce h;
{ assuming ‘∀x. ∃y. path(x, y)’ with name ‘h’ }
introduce x;
{ let ‘x’ be an entity }
use h,
instantiate with “x”,
unpack as p1 and p2:
{ let ‘p1’ be an entity }
{ assuming ‘path(x, p1)’ with name ‘p2’ }
exists “p1”;
use symmetry,
instantiate with “x”,
instantiate with “p1”,
apply with:
use p2,
done.
done.





1c
{ assuming ‘∀x. ∀y. ∀z. path(x, y) → path(y, z) → path(x, z)’ with name ‘transitivity’ }
introduce h1;
{ assuming ‘path(a(), b())’ with name ‘h1’ }
introduce h2;
{ assuming ‘path(b(), c())’ with name ‘h2’ }
use transitivity,
instantiate with “a()”,
instantiate with “b()”,
instantiate with “c()”,
apply with:
use h1,
done.
apply with:
use h2,
done.
done.





1d
{ assuming ‘∀x. ∀y. ∀z. path(x, y) → path(y, z) → path(x, z)’ with name ‘transitivity’ }
{ assuming ‘∀x. ∀y. path(x, y) → path(y, x)’ with name ‘symmetry’ }
introduce h1;
{ assuming ‘∀x. ∃y. path(x, y)’ with name ‘h1’ }
introduce z;
{ let ‘z’ be an entity }
use h1,
instantiate with “z”,
unpack as p1 and p2:
{ let ‘p1’ be an entity }
{ assuming ‘path(z, p1)’ with name ‘p2’ }
use transitivity,
instantiate with “z”,
instantiate with “p1”,
instantiate with “z”,
apply with:
use p2,
done.
apply with:
use symmetry,
instantiate with “z”,
instantiate with “p1”,
apply with:
use p2,
done.
done.
done.





1e
{ assuming ‘∀x. ∀y. path(x, y) ∨ path(y, x)’ with name ‘either-path’ }
introduce h1;
{ assuming ‘¬path(a(), b())’ with name ‘h1’ }
use either-path,
instantiate with “b()”,
instantiate with “a()”,
cases (1) h2 or (2) h3:
{ assuming ‘path(b(), a())’ with name ‘h2’ }
use h2,
done.
{ assuming ‘path(a(), b())’ with name ‘h3’ }
use h1,
refuted by:
use h3,
done.





1f
{ assuming ‘∀x. ∀y. path(x, y) ∨ path(y, x)’ with name ‘either-path’ }
{ assuming ‘∀x. ∀y. path(x, y) → path(y, x)’ with name ‘symmetry’ }
introduce x;
{ let ‘x’ be an entity }
introduce y;
{ let ‘y’ be an entity }
use either-path,
instantiate with “x”,
instantiate with “y”,
cases (1) h1 or (2) h2:
{ assuming ‘path(x, y)’ with name ‘h1’ }
use h1,
done.
{ assuming ‘path(y, x)’ with name ‘h2’ }
use symmetry,
instantiate with “y”,
instantiate with “x”,
apply with:
use h2,
done.
done.





2a
{ assuming ‘∀i. invoice(i) → (∃c. customer(c) ∧ custInvoice(c, i))’ with name ‘every-invoice-has-a-customer’ }
{ assuming ‘∃i. invoice(i)’ with name ‘exists-an-invoice’ }
use exists-an-invoice,
unpack as h1 and h2:
{ let ‘h1’ be an entity }
{ assuming ‘invoice(h1)’ with name ‘h2’ }
use every-invoice-has-a-customer,
instantiate with “h1”,
apply with:
use h2,
done.
unpack as h3 and h4:
{ let ‘h3’ be an entity }
{ assuming ‘customer(h3) ∧ custInvoice(h3, h1)’ with name ‘h4’ }
exists “h3”;
use h4,
first,
done.





2b
{ assuming ‘∀c. customer(c) → (∃i. invoice(i) ∧ custInvoice(c, i))’ with name ‘every-customer-has-an-invoice’ }
{ assuming ‘∃c. customer(c) ∧ (∀i. invoice(i) → ¬custInvoice(c, i))’ with name ‘exists-customer-without-invoice’ }
use exists-customer-without-invoice,
unpack as p1 and p2:
{ let ‘p1’ be an entity }
{ assuming ‘customer(p1) ∧ (∀i. invoice(i) → ¬custInvoice(p1, i))’ with name ‘p2’ }
exists “p1”;
use every-customer-has-an-invoice,
instantiate with “p1”,
apply with:
use p2,
first,
done.
unpack as p3 and p4:
{ let ‘p3’ be an entity }
{ assuming ‘invoice(p3) ∧ custInvoice(p1, p3)’ with name ‘p4’ }
use p2,
second,
instantiate with “p3”,
apply with:
use p4,
first,
done.
refuted by:
use p4,
second,
done.





3a
introduce x;
{ let ‘x’ be an entity }
introduce y;
{ let ‘y’ be an entity }
introduce z;
{ let ‘z’ be an entity }
introduce xequalsy;
{ assuming ‘x = y’ with name ‘xequalsy’ }
introduce yequalsz;
{ assuming ‘y = z’ with name ‘yequalsz’ }
use xequalsy,
rewrite→;
use yequalsz,
rewrite→;
introduce h;
{ assuming ‘P(z)’ with name ‘h’ }
use h,
done.





3b
{ assuming ‘mirror(leaf()) = leaf()’ with name ‘mirror-leaf’ }
{ assuming ‘∀x. ∀y. mirror(node(x, y)) = node(mirror(y), mirror(x))’ with name ‘mirror-node’ }
use mirror-node,
instantiate with “leaf()”,
instantiate with “node(leaf(), leaf())”,
rewrite→;
use mirror-leaf,
rewrite→;
use mirror-node,
instantiate with “leaf()”,
instantiate with “leaf()”,
rewrite→;
use mirror-leaf,
rewrite→;
reflexivity.





4a
{ assuming ‘∀x. add(x, 0) = x’ with name ‘add-zero’ }
{ assuming ‘∀x. ∀y. add(x, y) = add(y, x)’ with name ‘add-comm’ }
{ assuming ‘∀x. ∀y. ∀z. add(x, add(y, z)) = add(add(x, y), z)’ with name ‘add-assoc’ }
introduce x;
{ let ‘x’ be an entity }
exists “0”;
use add-zero,
instantiate with “x”,
done.





4b
{ assuming ‘∀x. add(x, 0) = x’ with name ‘add-zero’ }
{ assuming ‘∀x. ∀y. add(x, y) = add(y, x)’ with name ‘add-comm’ }
{ assuming ‘∀x. ∀y. ∀z. add(x, add(y, z)) = add(add(x, y), z)’ with name ‘add-assoc’ }
introduce x;
{ let ‘x’ be an entity }
exists “x”;
use add-comm,
instantiate with “x”,
instantiate with “0”,
rewrite←;
use add-zero,
instantiate with “x”,
done.





4c
{ assuming ‘∀x. add(x, 0) = x’ with name ‘add-zero’ }
{ assuming ‘∀x. ∀y. add(x, y) = add(y, x)’ with name ‘add-comm’ }
{ assuming ‘∀x. ∀y. ∀z. add(x, add(y, z)) = add(add(x, y), z)’ with name ‘add-assoc’ }
introduce x;
{ let ‘x’ be an entity }
introduce y;
{ let ‘y’ be an entity }
introduce z;
{ let ‘z’ be an entity }
introduce h1;
{ assuming ‘∃k. add(x, k) = y’ with name ‘h1’ }
introduce h2;
{ assuming ‘∃k. add(y, k) = z’ with name ‘h2’ }
use h1,
unpack as p1 and p2:
{ let ‘p1’ be an entity }
{ assuming ‘add(x, p1) = y’ with name ‘p2’ }
use h2,
unpack as p3 and p4:
{ let ‘p3’ be an entity }
{ assuming ‘add(y, p3) = z’ with name ‘p4’ }
exists “add(p1, p3)”;
use add-assoc,
instantiate with “x”,
instantiate with “p1”,
instantiate with “p3”,
rewrite→;
use p2,
rewrite→;
use p4,
done.





5a
sldjhgsog
ksjdfhgke
ksdhfkg
slfjdhg





5b
{ assuming ‘∀x. add(0, x) = x’ with name ‘add-zero’ }
{ assuming ‘∀x. ∀y. add(S(x), y) = S(add(x, y))’ with name ‘add-succ’ }
{ assuming ‘∀x. mul(0, x) = 0’ with name ‘mul-zero’ }
{ assuming ‘∀x. ∀y. mul(S(x), y) = add(y, mul(x, y))’ with name ‘mul-succ’ }
introduce x;
{ let ‘x’ be an entity }
induction x:
use mul-zero,
instantiate with “0”,
done.
{ let ‘x1’ be an entity }
{ assuming ‘mul(x1, 0) = 0’ with name ‘induction-hypothesis’ }
use mul-succ,
instantiate with “x1”,
instantiate with “0”,
rewrite→;
use induction-hypothesis,
rewrite→;
use add-zero,
instantiate with “0”,
done.





5c
sldjhgsog
ksjdfhgke
ksdhfkg
slfjdhg





5d
{ assuming ‘∀x. ¬0 = S(x)’ with name ‘zero-ne-succ’ }
{ assuming ‘∀x. add(0, x) = x’ with name ‘add-zero’ }
{ assuming ‘∀x. ∀y. add(S(x), y) = S(add(x, y))’ with name ‘add-succ’ }
introduce x;
{ let ‘x’ be an entity }
introduce y;
{ let ‘y’ be an entity }
induction x:
introduce h1;
{ assuming ‘add(0, y) = 0’ with name ‘h1’ }
use h1,
rewrite←;
use add-zero,
instantiate with “y”,
rewrite→;
reflexivity.
{ let ‘x1’ be an entity }
{ assuming ‘add(x1, y) = 0 → y = 0’ with name ‘induction-hypothesis’ }
use add-succ,
instantiate with “x1”,
instantiate with “y”,
rewrite→;
introduce h1;
{ assuming ‘S(add(x1, y)) = 0’ with name ‘h1’ }
use h1,
rewrite←;
use induction-hypothesis,
apply with:
use h1,
rewrite←;
use zero-ne-succ,
instantiate with “add(x1, y)”,
refuted by:
use h1,
rewrite→;
reflexivity.
rewrite→;
use zero-ne-succ,
instantiate with “add(x1, y)”,
refuted by:
use h1,
rewrite→;
reflexivity.





5e
{ assuming ‘∀x. ∀y. S(x) = S(y) → x = y’ with name ‘succ-injective’ }
{ assuming ‘∀x. add(0, x) = x’ with name ‘add-zero’ }
{ assuming ‘∀x. ∀y. add(S(x), y) = S(add(x, y))’ with name ‘add-succ’ }
introduce x;
{ let ‘x’ be an entity }
introduce y;
{ let ‘y’ be an entity }
induction x:
introduce h1;
{ assuming ‘add(0, y) = 0’ with name ‘h1’ }
use h1,
rewrite←;
use add-zero,
instantiate with “y”,
rewrite→;
reflexivity.
{ let ‘x1’ be an entity }
{ assuming ‘add(x1, y) = x1 → y = 0’ with name ‘induction-hypothesis’ }
introduce h1;
{ assuming ‘add(S(x1), y) = S(x1)’ with name ‘h1’ }
use induction-hypothesis,
apply with:
use succ-injective,
instantiate with “add(x1, y)”,
instantiate with “x1”,
apply with:
use add-succ,
instantiate with “x1”,
instantiate with “y”,
rewrite←;
use h1,
done.
done.
done.
