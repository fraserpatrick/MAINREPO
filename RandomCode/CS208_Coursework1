atom a
atom b
atom c
atom d

allsat (a|b|c|d)
  { "a": a, "b": b, "c": c, "d": d }





atom a
atom b
atom c
atom d

allsat ((~a|~b)&(~a|~c)&(~a|~d)&(~b|~c)&(~b|~d)&(~c|~d)&(a|b|c|d))
  { "a": a, "b": b, "c": c, "d": d }





atom a
atom b
atom c

allsat ((a|b)&(a|c)&(b|c)&(~a|~b|~c))
  { "a": a, "b": b, "c": c }





domain package {
  ChatServer, MailServer1, MailServer2,
  Database1, Database2, GitServer
}

atom installed(p : package)

define depends(p : package, dependency : package) {
  ~installed(p) | installed(dependency)
}

define conflict(p1 : package, p2 : package) {
  ~installed(p1) | ~installed(p2)
}

define depends_or(p : package, dependency1 : package, dependency2 : package) {
  ~installed(p) | (installed(dependency1)|installed(dependency2))
}

define dependencies_and_conflicts {
  depends_or(ChatServer, MailServer1, MailServer2) &
depends_or(ChatServer, Database1, Database2) &
conflict(MailServer1, MailServer2) &
conflict(Database1, Database2) &
depends(GitServer, Database2)
}

define requirements {
  installed(ChatServer) & installed(GitServer)
}

allsat(dependencies_and_conflicts & requirements)
  { for(packageName : package)
      packageName : installed(packageName)
  }





  domain machine { M1, M2, M3 }
    domain task { T1, T2, T3, T4, T5 }

    // If assign(t,m) is true, then task 't'
    // is assigned to machine 'm'.
    atom assign(t : task, m : machine)

    define all_tasks_some_machine {
      forall(t : task) some(m : machine) assign(t,m)
    }

    define all_tasks_one_machine {
      forall(t : task)
        forall(m1: machine)
          forall(m2 : machine)
            m1 = m2 | ~assign(t,m1) | ~assign(t,m2)
    }

    define separate_machines(task1 : task, task2 : task) {
      forall(m : machine) ~assign(task1, m) | ~assign(task2, m)
    }

    define conflicts {
      separate_machines(T1, T2)&
    separate_machines(T2, T3)&
    separate_machines(T2, T5)&
    separate_machines(T3, T4)&
    separate_machines(T3, T5)
    }

    define special_cases {
      ~assign(T1, M1) &
    ~assign(T1, M3) &
    ~assign(T2, M1) &
    ~assign(T3, M3) &
  (forall(m : machine) (~assign(T2, m) | assign(T4,m)))
    }

    define main {
      all_tasks_some_machine &
      all_tasks_one_machine &
      conflicts &
      special_cases
    }

    allsat(main)
      { for (t : task)
          t:[for (m : machine)
               if (assign(t, m)) m]
      }





  domain node { Input1, Input2, Output }

  atom active(n : node)

  define xor(x : node, y : node, z : node) {
    (~active(x)|~active(y)|~active(z))&(~active(x)|active(y)|active(z))&(active(x)|~active(y)|active(z))&(active(x)|active(y)|~active(z))
  }

  allsat (xor(Output, Input1, Input2))
   { "Input1": active(Input1),
     "Input2": active(Input2),
     "Output": active(Output) }





domain node { I1, I2, S, Cout }

atom active(n : node)

define xor(x : node, y : node, z : node) {
 (~active(x)|~active(y)|~active(z))&(~active(x)|active(y)|active(z))&(active(x)|~active(y)|active(z))&(active(x)|active(y)|~active(z))
}

// Use this
define and(x : node, y : node, z : node) {
 (~active(x) | active(y)) &
 (~active(x) | active(z)) &
 ( active(x) | ~active(y) | ~active(z))
}

define half-adder(input1 : node, input2 : node, sum : node, carry : node) {
 (xor(input1, input2, sum))&(and(carry, input1, input2))
}

allsat (half-adder (I1, I2, S, Cout))
 { for(n : node) n : active(n) }





       // You will have to add extra nodes for your circuit
domain node { Input1, Input2, Input3, Sum1, Sum2, Carry1, Carry2, CarryOut}

atom active(n : node)

// You'll have to make some definitions here
// You can use the gate definitions from the Circuits, Gates, and Formulas page

define xor(x : node, y : node, z : node) {
  (~active(x)|~active(y)|~active(z))&(~active(x)|active(y)|active(z))&(active(x)|~active(y)|active(z))&(active(x)|active(y)|~active(z))
}

define and(x : node, y : node, z : node) {
  (~active(x) | active(y)) &
  (~active(x) | active(z)) &
  ( active(x) | ~active(y) | ~active(z))
}

define half-adder(input1 : node, input2 : node, sum : node, carry : node) {
  (xor(input1, input2, sum))&(and(carry, input1, input2))
}
define or(output : node, i1 : node, i2 : node){
  (~active(output) | active(i1) | active(i2))&
(active(output) | ~active(i1))&
(active(output) | ~active(i2))
}
define main {
  half-adder(Input1,Input2,Sum1,Carry1) &
half-adder(Input3,Sum1,Sum2,Carry2) &
or(CarryOut,Carry1,Carry2)
}

allsat (main)
  { "Input1": active(Input1),
    "Input2": active(Input2),
    "Input3": active(Input3),
"Sum1": active(Sum1),
"Sum2": active(Sum2),
"Carry1": active(Carry1),
"Carry2": active(Carry2),
"CarryOut": active(CarryOut)}
